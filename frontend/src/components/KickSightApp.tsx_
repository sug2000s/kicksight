import React, { useState } from 'react';
import { LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from 'recharts';
import { motion, AnimatePresence } from 'framer-motion';

// Type definitions
interface Message {
    id: number;
    type: 'user' | 'bot' | 'bot-reasoning';
    content: string | AnalysisResponse;
    timestamp: string;
}

interface Conversation {
    id: number;
    title: string;
    messages: Message[];
}

interface VOCAnalysisResponse {
    analysis_type: string;
    period: string;
    total_voc_count: number;
    categories: {
        "주요 카테고리": string[];
        "분석 결과": Record<string, string>;
    };
    insights: string[];
    recommendation: string;
}

interface VOCTableResponse {
    data_type: string;
    columns: string[];
    rows: Array<Array<string | number>>;
    total_count: number;
    period: string;
}

interface PieChartResponse {
    chart_type: string;
    title: string;
    data: {
        labels: string[];
        values: number[];
        percentages: string[];
    };
    total_count: number;
    insights: string[];
}

interface LineChartResponse {
    analysis_type: string;
    chart_type: string;
    period: string;
    categories: string[];
    time_series_data: Record<string, Array<{ hour: string; value: number }>>;
    peak_hours: Record<string, string>;
    insights: string[];
}

interface ErrorResponse {
    message: string;
}

type AnalysisResponse = VOCAnalysisResponse | VOCTableResponse | PieChartResponse | LineChartResponse | ErrorResponse;

interface ReasoningStep {
    text: string;
    duration: number;
    icon: React.FC;
}

// Icons as SVG components
const MenuIcon = () => (
    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
    </svg>
);

const PlusIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
    </svg>
);

const SettingsIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    </svg>
);

const SendIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
    </svg>
);

const HeartIcon = ({ filled }: { filled: boolean }) => (
    <svg className={`w-5 h-5 ${filled ? 'fill-current' : ''}`} fill={filled ? 'currentColor' : 'none'} stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
    </svg>
);

const RobotIcon = () => (
    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
    </svg>
);

const CloseIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
    </svg>
);

const UserIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
    </svg>
);

const ChartIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
    </svg>
);

// Animated gear icon
const GearIcon = ({ className = "" }: { className?: string }) => (
    <svg className={`w-5 h-5 ${className}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    </svg>
);

// Various processing icons
const DatabaseIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
    </svg>
);

const SearchIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
);

const CalculatorIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
    </svg>
);

const ChartLineIcon = () => (
    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z" />
    </svg>
);

// Type guard functions
function isVOCAnalysis(response: AnalysisResponse): response is VOCAnalysisResponse {
    return 'analysis_type' in response && response.analysis_type === 'VOC_DATA_ANALYSIS';
}

function isVOCTable(response: AnalysisResponse): response is VOCTableResponse {
    return 'data_type' in response && response.data_type === 'VOC_TABLE';
}

function isPieChart(response: AnalysisResponse): response is PieChartResponse {
    return 'chart_type' in response && response.chart_type === 'pie_chart';
}

function isLineChart(response: AnalysisResponse): response is LineChartResponse {
    return 'chart_type' in response && response.chart_type === 'line_chart';
}

function isError(response: AnalysisResponse): response is ErrorResponse {
    return 'message' in response && !('analysis_type' in response) && !('data_type' in response) && !('chart_type' in response);
}

// Mock responses
const mockResponses: Record<string, AnalysisResponse> = {
    "2025년도 1월 VOC 데이터 분석 결과를 보여줘": {
        analysis_type: "VOC_DATA_ANALYSIS",
        period: "2025년도 1월",
        total_voc_count: 10000,
        categories: {
            "주요 카테고리": ["통화", "가격", "서비스"],
            "분석 결과": {
                "통화 카테고리 비중": "45%",
                "가격 카테고리 비중": "30%",
                "서비스 카테고리 비중": "25%"
            }
        },
        insights: [
            "전체 VOC 건수는 10,000건으로 전월 대비 증가",
            "통화 관련 문의가 45%로 가장 높은 비중",
            "가격 문의는 30%, 서비스 관련은 25%"
        ],
        recommendation: "통화 품질 개선에 우선 집중 필요"
    },
    "VOC 데이터를 테이블로 보여줘": {
        data_type: "VOC_TABLE",
        columns: ["날짜", "카테고리", "건수", "비중"],
        rows: [
            ["2025-01-01", "통화", 1500, "45%"],
            ["2025-01-01", "가격", 1000, "30%"],
            ["2025-01-01", "서비스", 833, "25%"]
        ],
        total_count: 3333,
        period: "2025년 1월"
    },
    "카테고리별 분포를 원형 차트로 보여줘": {
        chart_type: "pie_chart",
        title: "2025년 1월 VOC 카테고리별 분포",
        data: {
            labels: ["통화", "가격", "서비스", "기타"],
            values: [45, 30, 20, 5],
            percentages: ["45%", "30%", "20%", "5%"]
        },
        total_count: 10000,
        insights: [
            "통화 카테고리가 전체의 45%로 가장 높은 비중",
            "상위 3개 카테고리가 전체의 95% 차지"
        ]
    },
    "시간대별 피드백 추이를 보여줘": {
        analysis_type: "FEEDBACK_OVER_TIME",
        chart_type: "line_chart",
        period: "2025년 1월",
        categories: ["통화", "가격", "서비스"],
        time_series_data: {
            "통화": [
                {hour: "00:00", value: 45},
                {hour: "06:00", value: 35},
                {hour: "09:00", value: 55},
                {hour: "10:00", value: 60},
                {hour: "12:00", value: 52},
                {hour: "15:00", value: 47},
                {hour: "18:00", value: 48},
                {hour: "21:00", value: 40},
                {hour: "23:00", value: 36}
            ],
            "가격": [
                {hour: "00:00", value: 25},
                {hour: "06:00", value: 18},
                {hour: "09:00", value: 32},
                {hour: "10:00", value: 35},
                {hour: "12:00", value: 30},
                {hour: "15:00", value: 40},
                {hour: "18:00", value: 32},
                {hour: "21:00", value: 26},
                {hour: "23:00", value: 22}
            ],
            "서비스": [
                {hour: "00:00", value: 20},
                {hour: "06:00", value: 15},
                {hour: "09:00", value: 25},
                {hour: "10:00", value: 27},
                {hour: "12:00", value: 24},
                {hour: "15:00", value: 22},
                {hour: "18:00", value: 28},
                {hour: "21:00", value: 22},
                {hour: "23:00", value: 18}
            ]
        },
        peak_hours: {
            "통화": "10:00-12:00",
            "가격": "14:00-16:00",
            "서비스": "16:00-18:00"
        },
        insights: [
            "통화 관련 피드백은 오전 10-12시에 집중",
            "가격 문의는 오후 2-4시에 가장 많음",
            "서비스 관련 문의는 저녁 시간대 증가"
        ]
    }
};

// Color palette
const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];

// Notification component
const Notification = ({ show, message, description }: { show: boolean; message: string; description: string }) => (
    <AnimatePresence>
        {show && (
            <motion.div
                initial={{ opacity: 0, y: -20, x: 20 }}
                animate={{ opacity: 1, y: 0, x: 0 }}
                exit={{ opacity: 0, y: -20, x: 20 }}
                className="fixed top-4 right-4 bg-white rounded-lg shadow-lg p-4 border border-gray-200 z-50"
            >
                <div className="flex items-start">
                    <div className="flex-shrink-0">
                        <div className="text-green-500">
                            <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                            </svg>
                        </div>
                    </div>
                    <div className="ml-3">
                        <p className="text-sm font-medium text-gray-900">{message}</p>
                        <p className="mt-1 text-sm text-gray-500">{description}</p>
                    </div>
                </div>
            </motion.div>
        )}
    </AnimatePresence>
);

// Reasoning steps for different query types with icons
const reasoningSteps: Record<string, ReasoningStep[]> = {
    analysis: [
        { text: "질문을 분석하고 있습니다...", duration: 600, icon: SearchIcon },
        { text: "VOC 데이터베이스에 접속 중...", duration: 800, icon: DatabaseIcon },
        { text: "데이터를 수집하고 있습니다...", duration: 1000, icon: GearIcon },
        { text: "분석 결과를 생성하고 있습니다...", duration: 600, icon: ChartLineIcon }
    ],
    table: [
        { text: "테이블 구조를 준비하고 있습니다...", duration: 500, icon: GearIcon },
        { text: "데이터를 조회하고 있습니다...", duration: 800, icon: DatabaseIcon },
        { text: "테이블 형식으로 변환 중...", duration: 700, icon: CalculatorIcon }
    ],
    pieChart: [
        { text: "카테고리 데이터를 수집하고 있습니다...", duration: 600, icon: DatabaseIcon },
        { text: "비율을 계산하고 있습니다...", duration: 700, icon: CalculatorIcon },
        { text: "원형 차트를 생성하고 있습니다...", duration: 800, icon: ChartIcon }
    ],
    lineChart: [
        { text: "시계열 데이터를 불러오고 있습니다...", duration: 700, icon: DatabaseIcon },
        { text: "시간대별 추이를 분석 중...", duration: 900, icon: GearIcon },
        { text: "피크 시간을 계산하고 있습니다...", duration: 600, icon: CalculatorIcon },
        { text: "라인 차트를 그리고 있습니다...", duration: 700, icon: ChartLineIcon }
    ],
    default: [
        { text: "요청을 처리하고 있습니다...", duration: 1000, icon: GearIcon }
    ]
};

// Loading indicator component with icon
const LoadingIndicator = ({ message, Icon }: { message: string; Icon?: React.FC }) => (
    <div className="flex items-center space-x-3">
        <div className="relative">
            {Icon ? (
                <div className="text-blue-500 animate-spin">
                    <Icon />
                </div>
            ) : (
                <>
                    <div className="w-8 h-8 border-3 border-blue-200 rounded-full"></div>
                    <div className="w-8 h-8 border-3 border-blue-500 border-t-transparent rounded-full animate-spin absolute top-0 left-0"></div>
                </>
            )}
        </div>
        <span className="text-gray-600 text-sm animate-pulse">{message}</span>
    </div>
);

export default function KickSightApp() {
    const [conversations, setConversations] = useState<Conversation[]>([
        { id: 1, title: '새 대화', messages: [] }
    ]);
    const [activeConversation, setActiveConversation] = useState(1);
    const [inputMessage, setInputMessage] = useState('');
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const [showVisualization, setShowVisualization] = useState(false);
    const [currentVisualization, setCurrentVisualization] = useState<AnalysisResponse | null>(null);
    const [likedMessages, setLikedMessages] = useState(new Set<number>());
    const [showNotification, setShowNotification] = useState(false);
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [isProcessing, setIsProcessing] = useState(false);
    const [currentReasoningStep, setCurrentReasoningStep] = useState('');
    const [currentStepIcon, setCurrentStepIcon] = useState<React.FC | null>(null);

    const currentConvo = conversations.find(c => c.id === activeConversation);

    const handleSendMessage = async () => {
        if (!inputMessage.trim()) return;

        const userMessage: Message = {
            id: Date.now(),
            type: 'user',
            content: inputMessage,
            timestamp: new Date().toISOString()
        };

        // Add user message immediately
        setConversations(prev => prev.map(conv =>
            conv.id === activeConversation
                ? { ...conv, messages: [...conv.messages, userMessage] }
                : conv
        ));

        // Determine query type and reasoning steps
        let queryType = 'default';
        if (inputMessage.includes('분석')) queryType = 'analysis';
        else if (inputMessage.includes('테이블')) queryType = 'table';
        else if (inputMessage.includes('원형')) queryType = 'pieChart';
        else if (inputMessage.includes('시간대')) queryType = 'lineChart';

        const steps = reasoningSteps[queryType];

        // Add bot reasoning message
        const reasoningMessage: Message = {
            id: Date.now() + 0.5,
            type: 'bot-reasoning',
            content: '',
            timestamp: new Date().toISOString()
        };

        setConversations(prev => prev.map(conv =>
            conv.id === activeConversation
                ? { ...conv, messages: [...conv.messages, reasoningMessage] }
                : conv
        ));

        setIsProcessing(true);

        // Show reasoning steps
        for (let i = 0; i < steps.length; i++) {
            setCurrentReasoningStep(steps[i].text);
            setCurrentStepIcon(() => steps[i].icon);
            await new Promise(resolve => setTimeout(resolve, steps[i].duration));
        }

        // Find matching mock response
        let response: AnalysisResponse | null = null;
        Object.keys(mockResponses).forEach(key => {
            if (inputMessage.includes(key) ||
                (key.includes('VOC 데이터') && key.includes('분석') && inputMessage.includes('VOC') && inputMessage.includes('분석')) ||
                (key.includes('테이블') && inputMessage.includes('테이블')) ||
                (key.includes('원형') && inputMessage.includes('원형')) ||
                (key.includes('시간대') && inputMessage.includes('시간대'))) {
                response = mockResponses[key];
            }
        });

        const botMessage: Message = {
            id: Date.now() + 1,
            type: 'bot',
            content: response || { message: "죄송합니다. 해당 질문에 대한 답변을 찾을 수 없습니다." },
            timestamp: new Date().toISOString()
        };

        // Remove reasoning message and add final response
        setConversations(prev => prev.map(conv =>
            conv.id === activeConversation
                ? {
                    ...conv,
                    messages: conv.messages.filter(msg => msg.type !== 'bot-reasoning').concat(botMessage)
                }
                : conv
        ));

        setIsProcessing(false);
        setCurrentReasoningStep('');
        setCurrentStepIcon(null);

        // Show visualization if response has chart data
        if (response && (isPieChart(response) || isLineChart(response) || isVOCTable(response))) {
            setTimeout(() => {
                setCurrentVisualization(response);
                setShowVisualization(true);
            }, 300);
        }

        setInputMessage('');
    };

    const handleNewConversation = () => {
        const newId = Math.max(...conversations.map(c => c.id)) + 1;
        setConversations([...conversations, { id: newId, title: `새 대화 ${newId}`, messages: [] }]);
        setActiveConversation(newId);
        setShowVisualization(false);
        setCurrentVisualization(null);
    };

    const handleLike = (messageId: number) => {
        setLikedMessages(prev => new Set([...prev, messageId]));
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
    };

    const renderVisualization = () => {
        if (!currentVisualization) return null;

        if (isVOCTable(currentVisualization)) {
            return (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 h-full">
                    <h3 className="text-lg font-semibold mb-4">VOC 데이터 테이블 - {currentVisualization.period}</h3>
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                            <tr>
                                {currentVisualization.columns.map((col, idx) => (
                                    <th key={idx} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        {col}
                                    </th>
                                ))}
                            </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                            {currentVisualization.rows.map((row, idx) => (
                                <tr key={idx}>
                                    {row.map((cell, cellIdx) => (
                                        <td key={cellIdx} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            {cell}
                                        </td>
                                    ))}
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                    <div className="mt-4">
                        <p className="text-sm text-gray-500">총 건수: {currentVisualization.total_count}건</p>
                    </div>
                </div>
            );
        }

        if (isPieChart(currentVisualization)) {
            const pieData = currentVisualization.data.labels.map((label, idx) => ({
                name: label,
                value: currentVisualization.data.values[idx],
                percentage: currentVisualization.data.percentages[idx]
            }));

            return (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 h-full">
                    <h3 className="text-lg font-semibold mb-4">{currentVisualization.title}</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie
                                data={pieData}
                                cx="50%"
                                cy="50%"
                                labelLine={false}
                                label={(_entry) => `${_entry.name}: ${_entry.percentage}`}
                                outerRadius={80}
                                fill="#8884d8"
                                dataKey="value"
                            >
                                {pieData.map((_entry, index) => (
                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                ))})
                            </Pie>
                            <RechartsTooltip />
                        </PieChart>
                    </ResponsiveContainer>
                    <div className="mt-4 space-y-1">
                        {currentVisualization.insights.map((insight, idx) => (
                            <p key={idx} className="text-sm text-gray-600">• {insight}</p>
                        ))}
                    </div>
                </div>
            );
        }

        if (isLineChart(currentVisualization)) {
            const chartData: Array<{ hour: string; [key: string]: string | number }> = [];
            const firstCategory = Object.keys(currentVisualization.time_series_data)[0];
            currentVisualization.time_series_data[firstCategory].forEach((item, idx) => {
                const dataPoint: { hour: string; [key: string]: string | number } = { hour: item.hour };
                Object.keys(currentVisualization.time_series_data).forEach(category => {
                    dataPoint[category] = currentVisualization.time_series_data[category][idx].value;
                });
                chartData.push(dataPoint);
            });

            return (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 h-full">
                    <h3 className="text-lg font-semibold mb-4">시간대별 피드백 추이 - {currentVisualization.period}</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={chartData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="hour" />
                            <YAxis />
                            <RechartsTooltip />
                            <Legend />
                            {currentVisualization.categories.map((category, idx) => (
                                <Line
                                    key={category}
                                    type="monotone"
                                    dataKey={category}
                                    stroke={COLORS[idx % COLORS.length]}
                                    strokeWidth={2}
                                />
                            ))}
                        </LineChart>
                    </ResponsiveContainer>
                    <div className="mt-6">
                        <h4 className="font-semibold mb-2">Peak Hours</h4>
                        {Object.entries(currentVisualization.peak_hours).map(([category, time]) => (
                            <div key={category} className="flex items-center mb-1">
                <span
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: COLORS[currentVisualization.categories.indexOf(category) % COLORS.length] }}
                />
                                <span className="text-sm">{category}: {time}</span>
                            </div>
                        ))}
                        <div className="mt-4 space-y-1">
                            {currentVisualization.insights.map((insight, idx) => (
                                <p key={idx} className="text-sm text-gray-600">• {insight}</p>
                            ))}
                        </div>
                    </div>
                </div>
            );
        }

        return null;
    };

    const renderMessage = (message: Message) => {
        if (message.type === 'user') {
            return (
                <div className="flex justify-end mb-4">
                    <div className="max-w-2xl">
                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <p className="text-gray-900">{message.content as string}</p>
                        </div>
                    </div>
                </div>
            );
        }

        if (message.type === 'bot-reasoning') {
            return (
                <div className="flex justify-start mb-4">
                    <div className="max-w-2xl">
                        <div className="flex items-start space-x-2">
                            <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white">
                                <RobotIcon />
                            </div>
                            <div className="flex-1">
                                <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                                    <LoadingIndicator message={currentReasoningStep} Icon={currentStepIcon || undefined} />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        return (
            <div className="flex justify-start mb-4">
                <div className="max-w-2xl">
                    <div className="flex items-start space-x-2">
                        <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white">
                            <RobotIcon />
                        </div>
                        <div className="flex-1">
                            <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                                {typeof message.content === 'object' ? (
                                    <div>
                                        {isVOCAnalysis(message.content) && (
                                            <>
                                                <h4 className="font-semibold mb-2">{message.content.analysis_type.replace(/_/g, ' ')}</h4>
                                                <p className="text-sm mb-2">기간: {message.content.period}</p>
                                                <p className="text-sm mb-2">전체 VOC 건수: {message.content.total_voc_count.toLocaleString()}건</p>
                                                <div className="mb-3">
                                                    <p className="font-medium">주요 카테고리: <span className="font-normal">{message.content.categories['주요 카테고리'].join(', ')}</span></p>
                                                    <div className="mt-2 space-y-1">
                                                        {Object.entries(message.content.categories['분석 결과']).map(([key, value]) => (
                                                            <p key={key} className="text-sm">• {key}: {value}</p>
                                                        ))}
                                                    </div>
                                                </div>
                                                <div className="mb-3">
                                                    <p className="font-medium mb-1">인사이트:</p>
                                                    <div className="space-y-1">
                                                        {message.content.insights.map((insight, idx) => (
                                                            <p key={idx} className="text-sm">• {insight}</p>
                                                        ))}
                                                    </div>
                                                </div>
                                                <div className="mt-2 p-3 bg-yellow-50 rounded border border-yellow-200">
                                                    <p className="text-sm"><span className="font-medium">추천사항:</span> {message.content.recommendation}</p>
                                                </div>
                                            </>
                                        )}
                                        {isLineChart(message.content) && (
                                            <>
                                                <p className="text-sm mb-2">기간: {message.content.period}</p>
                                                <p className="font-medium">카테고리: <span className="font-normal">{message.content.categories.join(', ')}</span></p>
                                                <div className="mb-3">
                                                    <p className="font-medium mb-1">인사이트:</p>
                                                    <div className="space-y-1">
                                                        {message.content.insights.map((insight, idx) => (
                                                            <p key={idx} className="text-sm">• {insight}</p>
                                                        ))}
                                                    </div>
                                                </div>
                                            </>
                                        )}
                                        {isPieChart(message.content) && (
                                            <>
                                                <h4 className="font-semibold mb-2">{message.content.title}</h4>
                                                <p className="text-sm mb-2">전체 건수: {message.content.total_count.toLocaleString()}건</p>
                                                <div className="mb-3">
                                                    <p className="font-medium mb-1">인사이트:</p>
                                                    <div className="space-y-1">
                                                        {message.content.insights.map((insight, idx) => (
                                                            <p key={idx} className="text-sm">• {insight}</p>
                                                        ))}
                                                    </div>
                                                </div>
                                            </>
                                        )}
                                        {(isPieChart(message.content) || isLineChart(message.content) || isVOCTable(message.content)) && (
                                            <div className="mt-3 p-3 bg-blue-50 rounded border border-blue-200 cursor-pointer hover:bg-blue-100 transition-colors"
                                                 onClick={() => {
                                                     setCurrentVisualization(message.content as AnalysisResponse);
                                                     setShowVisualization(true);
                                                 }}>
                                                <div className="flex items-center justify-between">
                                                    <div className="flex items-center space-x-2">
                                                        <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                                        </svg>
                                                        <span className="text-sm font-medium text-blue-700">
                              {isVOCTable(message.content) ? '테이블 데이터 보기' :
                                  isPieChart(message.content) ? '원형 차트 보기' :
                                      '라인 차트 보기'}
                            </span>
                                                    </div>
                                                    <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                                    </svg>
                                                </div>
                                            </div>
                                        )}
                                        {isError(message.content) && (
                                            <p>{message.content.message}</p>
                                        )}
                                    </div>
                                ) : (
                                    <p>{message.content}</p>
                                )}
                                <div className="mt-3 flex justify-end space-x-2">
                                    {(typeof message.content === 'object' && (isPieChart(message.content) || isLineChart(message.content) || isVOCTable(message.content))) && (
                                        <button
                                            onClick={() => {
                                                setCurrentVisualization(message.content as AnalysisResponse);
                                                setShowVisualization(true);
                                            }}
                                            className="flex items-center space-x-1 px-3 py-1 rounded-md transition-colors text-blue-500 hover:bg-blue-50"
                                        >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                            </svg>
                                            <span className="text-sm">차트 보기</span>
                                        </button>
                                    )}
                                    <button
                                        onClick={() => handleLike(message.id)}
                                        disabled={likedMessages.has(message.id)}
                                        className={`flex items-center space-x-1 px-3 py-1 rounded-md transition-colors ${
                                            likedMessages.has(message.id)
                                                ? 'text-red-500 bg-red-50 cursor-not-allowed'
                                                : 'text-gray-500 hover:text-red-500 hover:bg-red-50'
                                        }`}
                                    >
                                        <HeartIcon filled={likedMessages.has(message.id)} />
                                        <span className="text-sm">{likedMessages.has(message.id) ? '감사합니다!' : '좋아요'}</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    return (
        <div className="h-screen flex flex-col bg-gray-50">
            <Notification
                show={showNotification}
                message="감사합니다! 💙"
                description="피드백이 성공적으로 저장되었습니다."
            />

            {/* Header */}
            <header className="bg-white border-b border-gray-200 px-4 py-3">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <button
                            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                            className="p-2 hover:bg-gray-100 rounded-md transition-colors"
                        >
                            <MenuIcon />
                        </button>
                        <h1 className="text-2xl font-bold text-gray-900">Kick-sight</h1>
                    </div>
                    <div className="flex items-center space-x-2">
                        <button
                            onClick={handleNewConversation}
                            className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                        >
                            <PlusIcon />
                            <span>새 대화</span>
                        </button>
                        <div className="relative">
                            <button
                                onClick={() => setDropdownOpen(!dropdownOpen)}
                                className="p-2 hover:bg-gray-100 rounded-md transition-colors"
                            >
                                <SettingsIcon />
                            </button>
                            {dropdownOpen && (
                                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 z-10">
                                    <button className="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center space-x-2">
                                        <UserIcon />
                                        <span>프로필</span>
                                    </button>
                                    <button className="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center space-x-2">
                                        <SettingsIcon />
                                        <span>설정</span>
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </header>

            <div className="flex flex-1 overflow-hidden">
                {/* Sidebar */}
                <aside className={`${sidebarCollapsed ? 'w-0' : 'w-64'} bg-white border-r border-gray-200 transition-all duration-300 overflow-hidden`}>
                    <div className="p-4">
                        <h2 className="text-lg font-semibold text-gray-700 mb-4">대화 이력</h2>
                        <div className="space-y-2">
                            {conversations.map(conv => (
                                <button
                                    key={conv.id}
                                    onClick={() => {
                                        setActiveConversation(conv.id);
                                        setShowVisualization(false);
                                        setCurrentVisualization(null);
                                    }}
                                    className={`w-full text-left px-3 py-2 rounded-md transition-colors flex items-center justify-between ${
                                        conv.id === activeConversation
                                            ? 'bg-blue-50 text-blue-700 border border-blue-300'
                                            : 'hover:bg-gray-100'
                                    }`}
                                >
                                    <span className="truncate">{conv.title}</span>
                                    <span className="ml-2 bg-gray-200 text-gray-700 px-2 py-1 rounded-full text-xs">
                    {conv.messages.filter(m => m.type === 'user').length}
                  </span>
                                </button>
                            ))}
                        </div>
                    </div>
                </aside>

                {/* Main Content */}
                <main className="flex-1 flex overflow-hidden">
                    <div className={`flex-1 p-6 transition-all duration-300 ${showVisualization ? 'pr-3' : ''}`}>
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 h-full flex flex-col">
                            <div className="flex-1 overflow-y-auto p-6">
                                {currentConvo && currentConvo.messages.length === 0 ? (
                                    <div className="flex items-center justify-center h-full">
                                        <div className="text-center max-w-md">
                                            <div className="mb-8">
                                                <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                                    <RobotIcon />
                                                </div>
                                                <p className="text-gray-500 mb-6">대화를 시작해보세요! 아래 예시 질문을 참고하세요.</p>
                                            </div>
                                            <div className="text-left bg-gray-50 rounded-lg p-4">
                                                <h3 className="font-semibold mb-2">예시 질문:</h3>
                                                <p className="text-sm mb-1">1. 2025년도 1월 VOC 데이터 분석 결과를 보여줘</p>
                                                <p className="text-sm mb-1">2. VOC 데이터를 테이블로 보여줘</p>
                                                <p className="text-sm mb-1">3. 카테고리별 분포를 원형 차트로 보여줘</p>
                                                <p className="text-sm">4. 시간대별 피드백 추이를 보여줘</p>
                                            </div>
                                        </div>
                                    </div>
                                ) : currentConvo ? (
                                    currentConvo.messages.map(msg => (
                                        <div key={msg.id}>
                                            {renderMessage(msg)}
                                        </div>
                                    ))
                                ) : null}
                            </div>
                            <div className="border-t border-gray-200 p-4">
                                <div className="flex space-x-2">
                  <textarea
                      value={inputMessage}
                      onChange={e => setInputMessage(e.target.value)}
                      onKeyPress={e => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                              e.preventDefault();
                              handleSendMessage();
                          }
                      }}
                      placeholder="메시지를 입력하세요..."
                      className="flex-1 resize-none border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={3}
                      disabled={isProcessing}
                  />
                                    <button
                                        onClick={handleSendMessage}
                                        disabled={!inputMessage.trim() || isProcessing}
                                        className={`px-4 py-2 rounded-md transition-colors flex items-center space-x-2 ${
                                            inputMessage.trim() && !isProcessing
                                                ? 'bg-blue-500 text-white hover:bg-blue-600'
                                                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                        }`}
                                    >
                                        <SendIcon />
                                        <span>전송</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Visualization Panel */}
                    <AnimatePresence>
                        {showVisualization && (
                            <motion.div
                                initial={{ width: 0, opacity: 0 }}
                                animate={{ width: 500, opacity: 1 }}
                                exit={{ width: 0, opacity: 0 }}
                                transition={{ duration: 0.3 }}
                                className="overflow-hidden"
                            >
                                <div className="h-full p-6 pl-3">
                                    <div className="h-full relative">
                                        <button
                                            onClick={() => setShowVisualization(false)}
                                            className="absolute top-2 right-2 z-10 p-1 hover:bg-gray-100 rounded-md transition-colors"
                                        >
                                            <CloseIcon />
                                        </button>
                                        {renderVisualization()}
                                    </div>
                                </div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </main>
            </div>
        </div>
    );
}